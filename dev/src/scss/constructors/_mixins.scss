@mixin rem($property, $value) {
	#{$property}: strip-units($value) + px;
	@if $rem_support == true {
		#{$property}: (strip-units($value) / strip-units($base-font-size-mixins)) + rem;
	}
}

@mixin height($height){
	height:$height +px;

	@if $rem-support == true {
		height:$height / $base-font-size-mixins +rem;
	}
}

@mixin min-height($min-height){
	min-height:$min-height +px;

	@if $rem-support == true {
		min-height:$min-height / $base-font-size-mixins +rem;
	}
}

@mixin width($width){
	width:$width +px;

	@if $rem-support == true {
		width:$width / $base-font-size-mixins +rem;
	}
}

@mixin img_no_max_width {
	width: 100%;
	max-width: none;
}

@mixin max-width($max-width){
	width: 100%;
	max-width:$max-width +px;

	@if $rem-support == true {
		max-width:$max-width / $base-font-size-mixins +rem;
	}
}

@mixin margin($top, $right, $bottom, $left){
	margin:$top +px $right +px $bottom +px $left +px;

	@if $rem-support == true {
		margin:$top / $base-font-size-mixins +rem $right / $base-font-size-mixins +rem $bottom / $base-font-size-mixins +rem $left / $base-font-size-mixins +rem;
	}
}

@mixin margin-top($top){
	margin-top:$top +px;

	@if $rem-support == true {
		margin-top:$top / $base-font-size-mixins +rem;
	}
}

@mixin margin-right($right){
	margin-right:$right +px;

	@if $rem-support == true {
		margin-right:$right / $base-font-size-mixins +rem;
	}
}

@mixin margin-bottom($bottom){
	margin-bottom:$bottom +px;

	@if $rem-support == true {
		margin-bottom:$bottom / $base-font-size-mixins +rem;
	}
}

@mixin margin-left($left){
	margin-left:$left +px;

	@if $rem-support == true {
		margin-left:$left / $base-font-size-mixins +rem;
	}
}

@mixin margin-auto($null_top: 0, $null_bottom: 0){
	margin:$null_top +px auto $null_bottom +px;

	@if $rem-support == true {
		margin:$null_top / $base-font-size-mixins +rem auto $null_bottom / $base-font-size-mixins +rem;
	}
}

@mixin padding($top, $right, $bottom, $left){
	padding:$top +px $right +px $bottom +px $left +px;

	@if $rem-support == true {
		padding:$top / $base-font-size-mixins +rem $right / $base-font-size-mixins +rem $bottom / $base-font-size-mixins +rem $left / $base-font-size-mixins +rem;
	}
}

@mixin padding-top($top){
	padding-top:$top +px;

	@if $rem-support == true {
		padding-top:$top / $base-font-size-mixins +rem;
	}
}

@mixin padding-right($right){
	padding-right:$right +px;

	@if $rem-support == true {
		padding-right:$right / $base-font-size-mixins +rem;
	}
}

@mixin padding-bottom($bottom){
	padding-bottom:$bottom +px;

	@if $rem-support == true {
		padding-bottom:$bottom / $base-font-size-mixins +rem;
	}
}

@mixin padding-left($left){
	padding-left:$left +px;

	@if $rem-support == true {
		padding-left:$left / $base-font-size-mixins +rem;
	}
}

@mixin font-size($font-size){
	font-size:$font-size +px;
	@if $rem-support == true {
		font-size:$font-size / $base-font-size-mixins +rem;
	}
}

@mixin webfont($webfont, $font-weight: normal){
	font-family: $webfont, Arial, Helvetica, sans-serif;
	font-style: normal;
	font-weight: $font-weight;
}

@mixin transition($color, $duration, $ease){
	-webkit-transition: $color $duration +ms $ease;
	-moz-transition: $color $duration +ms $ease;
	-ms-transition: $color $duration +ms $ease;
	-o-transition: $color $duration +ms $ease;
	transition: $color $duration +ms $ease;
}

@mixin transition-duration($duration){
	-webkit-transition: $duration +ms;
	-moz-transition: $duration +ms;
	-ms-transition: $duration +ms;
	-o-transition: $duration +ms;
	transition: $duration +ms;
}

// @mixin border-radius($border-radius){
// 	-webkit-border-radius: $border-radius +px;
//     border-radius: $border-radius +px;
// }

@mixin box-shadow-reset {
	-webkit-box-shadow: none;
	box-shadow: none;
}

@mixin wrapper-base($width) {
	width: 100%;
	margin: 0 auto;
	max-width: $width +px;
	
	@if $rem-support == true {
		max-width: $width / $base-font-size-mixins +rem;
	}
}

@mixin change-color-bg($path1, $path2) {
	background-image: url($path1 $change_color_name $path2);
}

@mixin translateX {
	-moz-transform:translateX(0);
	-webkit-transform:translateX(0);
	-o-transform:translateX(0);
	-ms-transform:translateX(0);
	transform:translateX(0);
}

@mixin backface-visibility-hidden {
	-webkit-backface-visibility: hidden;
	// -moz-backface-visibility: hidden;
	// -ms-backface-visibility: hidden;
}

@mixin transition-reset {
	-webkit-transform: none;
	-moz-transform: none;
	-ms-transform: none;
	-o-transform: none;
	transform: none;
}

@mixin list-reset {
	margin: 0;
	padding: 0;

	li {
		list-style: none;
		margin-bottom: 0;
		padding-left: 0;
		position: static;

		&:before {
			display: none;
		}
	}
}

@mixin link-reset {
	text-decoration: none;

	&:hover {
		text-decoration: underline;
	}
}

@mixin position-atl($top:0, $left:0, $margin-top:0) {
	position: absolute;

	top: $top +px;
	@if unit($top) != "%" {
		@if $rem-support == true {
			top: $top / $base-font-size-mixins +rem;
		}
	}

	left: $left +px;
	@if unit($left) != "%" {
		@if $rem-support == true {
			left: $left / $base-font-size-mixins +rem;
		}
	}

	margin-top: $margin-top +px;
	@if unit($margin-top) != "%" {
		@if $rem-support == true {
			margin-top: $margin-top / $base-font-size-mixins +rem;
		}
	}
}

@mixin position-atr($top:0, $right:0, $margin-top:0) {
	position: absolute;

	top: $top +px;
	@if unit($top) != "%" {
		@if $rem-support == true {
			top: $top / $base-font-size-mixins +rem;
		}
	}

	right: $right +px;
	@if unit($right) != "%" {
		@if $rem-support == true {
			right: $right / $base-font-size-mixins +rem;
		}
	}

	margin-top: $margin-top +px;
	@if unit($margin-top) != "%" {
		@if $rem-support == true {
			margin-top: $margin-top / $base-font-size-mixins +rem;
		}
	}
}

@mixin position-abl($bottom:0, $left:0, $margin-top:0) {
	position: absolute;

	bottom: $bottom +px;
	@if unit($bottom) != "%" {
		@if $rem-support == true {
			bottom: $bottom / $base-font-size-mixins +rem;
		}
	}

	left: $left +px;
	@if unit($left) != "%" {
		@if $rem-support == true {
			left: $left / $base-font-size-mixins +rem;
		}
	}

	margin-top: $margin-top +px;
	@if unit($margin-top) != "%" {
		@if $rem-support == true {
			margin-top: $margin-top / $base-font-size-mixins +rem;
		}
	}
}

@mixin position-abr($bottom:0, $right:0, $margin-top:0) {
	position: absolute;

	bottom: $bottom +px;
	@if unit($bottom) != "%" {
		@if $rem-support == true {
			bottom: $bottom / $base-font-size-mixins +rem;
		}
	}

	right: $right +px;
	@if unit($right) != "%" {
		@if $rem-support == true {
			right: $right / $base-font-size-mixins +rem;
		}
	}

	margin-top: $margin-top +px;
	@if unit($margin-top) != "%" {
		@if $rem-support == true {
			margin-top: $margin-top / $base-font-size-mixins +rem;
		}
	}
}

@mixin respond-to($media) {
	@if $media == 'mobile-nav-after' {
		@media only screen and (min-width:lower-bound($mobile-nav-after-range)) { @content; }
	}
	@else if $media == 'mobile-nav-only' {
		@media only screen and (min-width:lower-bound($mobile-nav-range)) and (max-width:upper-bound($mobile-nav-range)) { @content; }
	}
	@else if $media == 'mobile-nav-up' {
		@media only screen and (min-width:lower-bound($mobile-nav-range)) { @content; }
	}
	@else if $media == 'xxlarge-only' {
		@media only screen and (min-width:lower-bound($xxlarge-range)) and (max-width:upper-bound($xxlarge-range)) { @content; }
	}
	@else if $media == 'xxlarge-up' {
		@media only screen and (min-width:lower-bound($xxlarge-range)) { @content; }
	}
	@else if $media == 'xxlarge-down' {
		@media only screen and (max-width:lower-bound($xxlarge-range)) { @content; }
	}
	@else if $media == 'xlarge-only' {
		@media only screen and (min-width:lower-bound($xlarge-range)) and (max-width:upper-bound($xlarge-range)) { @content; }
	}
	@else if $media == 'xlarge-up' {
		@media only screen and (min-width:lower-bound($xlarge-range)) { @content; }
	}
	@else if $media == 'xlarge-down' {
		@media only screen and (max-width:lower-bound($xlarge-range)) { @content; }
	}
	@else if $media == 'large-only' {
		@media only screen and (min-width:lower-bound($large-range)) and (max-width:upper-bound($large-range)) { @content; }
	}
	@else if $media == 'large-up' {
		@media only screen and (min-width:lower-bound($large-range)) { @content; }
	}
	@else if $media == 'large-down' {
		@media only screen and (max-width:lower-bound($large-range)) { @content; }
	}
	@else if $media == 'medium-only' {
		@media only screen and (min-width:lower-bound($medium-range)) and (max-width:upper-bound($medium-range)) { @content; }
	}
	@else if $media == 'medium-up' {
		@media only screen and (min-width:lower-bound($medium-range)) { @content; }
	}
	@else if $media == 'medium-down' {
		@media only screen and (max-width:lower-bound($medium-range)) { @content; }
	}
	@else if $media == 'small-only' {
		@media only screen and (max-width: upper-bound($small-range)) { @content; }
	}
	@else if $media == 'small-up' {
		@media only screen { @content; }
	}
	@else if $media == 'retina-4x' {
		@media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) { @content; }
	}
	@else if $media == 'xsmall-only' {
		@media only screen and (max-width: 340px) { @content; }
	}
}

@mixin respond-to-max-width($max-width) {
	@media only screen and (max-width:$max-width+px) { @content; }
}

@mixin respond-to-min-width($min-width) {
	@media only screen and (min-width:$min-width+px) { @content; }
}

@mixin respond-to-min-and-max-width($min-width, $max-width) {
	@media only screen and (min-width:$min-width+px) and (max-width:$max-width+px) { @content; }
}

@mixin rotate($degrees) {
  -webkit-transform: rotate(#{$degrees}deg);
  -moz-transform: rotate(#{$degrees}deg);
  -ms-transform: rotate(#{$degrees}deg);
  -o-transform: rotate(#{$degrees}deg);
  transform: rotate(#{$degrees}deg);

  filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
 }